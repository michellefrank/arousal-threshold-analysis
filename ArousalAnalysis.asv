% Script for reading in metadata about experiment parameters, importing
% relevant monitor data, and calculating the percentage of flies that wake
% up following a given light stimulus
% V.4 by MMF 14.12.14

% To-do list
% Add ability to self-extract info about bin size
% Once deciding whether to do new analysis or old analysis hard code it in.
    % Or better, just add options to do either.
% Find way to export raw data about responsiveness for each genotype
% Find better way to export *everything*
% Find a smarter way to extract label/filename about data from import file


%% Set global parameters
% NOTE: the size of these bins will change based on the width of the
% recording bin. Default values are based on 30 second recording intervals.

% Set monitor directory
monitor_dir = 'D:\Projects\Monitor-Files\AT\';

% Set envMon num
envMon_num = '4';

%% Import experimental metadata

% Import metadata
[meta_file, save_path] = uigetfile('D:\Projects\Gal4-Screen\*.xlsx');

expInfo = importdata(fullfile(save_path, meta_file));
genotypes = {expInfo{4:end,2}};

% Convert channel info to nums & filter dead flies.
for i = 4:length(expInfo)
   expInfo{i,3} = str2num(expInfo{i,3}); 
   expInfo{i,3}(expInfo{i,3}<0) = [];
end

%% Extract bin width & set offsets

envMon = importdata([monitor_dir, envMon_num, '.txt']);

% Assume that the bins between 9 pm and whatever comes next on the first
% day of AT is indicative of the bin width

% Identify that index
timeidx = find(strcmp(envMon.textdata(:,2), expInfo{1,1}) & strcmp(envMon.textdata(:,3), '21:00:00'));

% Extract the time stamps
time1 = envMon.textdata(timeidx,3);
time2 = envMon.textdata(timeidx+1,3);

% Convert to numbers
time1 = str2double(regexp(time1, ':', 'split'));
time2 = str2double(regexp(time2, ':', 'split'));

% Convert to minutes
t1 = time1(1)*60 + time1(2) + time1(3)/60;
t2 = time2(1)*60 + time2(2) + time2(3)/60;

% Identify the bin width
bin_width = t2 - t1;

% Clean up the workspace
clear t1

% Set the number of bins to check for sleep before a stimulus
sleep_delay = 10; %5 min

% Set the number of bins to check after a stimulus for waking
wake_offset = 5; %Three minutes from the onset of a thirty-second stim

% Set the offset (in number of bins) to check for normalization; if you
% don't want to normalize, make this zero
norm_offset = 20;

%% Find indices corresponding to stimulus onset

% Pick stimulus file
stim_file = expInfo{3,1};

stim_times = findStim(stim_file);

%% Search through fly monitors for activity for each of the given genotypes
% The findWake function imports the relevant data and parses arousal
% responses.

% Create cell array of structs to house all of the data
wakeResults = struct;
activities = struct; %create separate array to store aggregated activity data
latencies = struct; %create separate array to store data about sleep delay after stim

fly = 0; %Initialize variable to loop through genotypes

for i = 1:length(expInfo)-3
    
    fly = i+3;
    
    wakeResults(i).genotype = expInfo{fly,2};
    
    [wakeResults(i).arousal_index, wakeResults(i).normalized_percents, ... 
        wakeResults(i).fly_sleeping_sum, wakeResults(i).activity_struct, wakeResults(i).sleep_delays] = ...
        findWake(fly, expInfo, monitor_dir, norm_offset, sleep_delay, wake_offset, stim_times);
    
    % Add data to activity struct
    activities(i).genotype = wakeResults(i).genotype;
    [activities(i).hist, activities(i).fract_hist] = activityHist(wakeResults(i).activity_struct);
    activities(i).meanSleeping = mean(wakeResults(i).activity_struct.asleep);
    activities(i).meanAwake = mean(wakeResults(i).activity_struct.awake);
    activities(i).stdSleeping = std(wakeResults(i).activity_struct.asleep);
    activities(i).stdAwake = std(wakeResults(i).activity_struct.awake);
    activities(i).semSleeping = sem(wakeResults(i).activity_struct.asleep);
    activities(i).semAwake = sem(wakeResults(i).activity_struct.awake);
    
    % Add data to latency struct
    latencies(i).genotype = wakeResults(i).genotype;
    latencies(i).mean = mean(wakeResults(i).sleep_delays);
    latencies(i).std = std(wakeResults(i).sleep_delays);
    latencies(i).sem = sem(wakeResults(i).sleep_delays);
    
end

%% Make summary graphs

% Percentages per stim
plot_data = [];

for i = 1:length(wakeResults)
    
    plot_data = [plot_data wakeResults(i).normalized_percents];

end

% Plot it!
figure('Color', [1 1 1]); notBoxPlot(plot_data);
title('Arousability','fontweight','bold');
set(gca,'XTick',1:length(genotypes));
set(gca,'XTickLabel',genotypes);
ylabel('Percent Awakened');
tightfig;
rotateticklabel(gca,45);
savefig(gcf, [save_path, 'percent-awakened']);

% Arousal indices
arousal_indices = {'Genotype', 'Arousal Index'};
arousal_indices_array = [];

index = 2;

for i = 1:length(wakeResults)
   
    arousal_indices{index,1} = wakeResults(i).genotype;
    arousal_indices{index,2} = wakeResults(i).arousal_index;
    arousal_indices_array(i) = wakeResults(i).arousal_index;
    
    index = index+1;
    
end

% plot that
figure('Color', [1 1 1]); plot(arousal_indices_array,'o');
title('Arousability','fontweight','bold');
set(gca,'XTick',1:length(genotypes));
set(gca,'XTickLabel',genotypes);
ylabel('Arousal Index');
tightfig;
rotateticklabel(gca,45);
savefig(gcf, [save_path, 'arousal-indices'])


%% Plot activity & latency data

% Activity
figure('Color',[1 1 1]); plot([activities.meanSleeping],'o','Color','blue');
title('Responsiveness of sleeping flies','fontweight','bold');
set(gca,'XTick',1:length(genotypes));
set(gca,'XTickLabel',genotypes);
ylabel('Beam crossings/minute');
tightfig;
rotateticklabel(gca,45);
savefig(gcf, [save_path, 'asleep-activity']);

figure('Color',[1 1 1]); plot([activities.meanAwake],'o','Color','red');
title('Responsiveness of awake flies','fontweight','bold');
set(gca,'XTick',1:length(genotypes));
set(gca,'XTickLabel',genotypes);
ylabel('Beam crossings/minute');
tightfig;
rotateticklabel(gca,45);
savefig(gcf, [save_path, 'awake-activity']);

% Latency
figure('Color',[1 1 1]); plot([latencies.mean],'o','Color','blue');
title('Mean latency to sleep following stimulus','fontweight','bold');
set(gca,'XTick',1:length(genotypes));
set(gca,'XTickLabel',genotypes);
ylabel('Minutes');
tightfig;
rotateticklabel(gca,45);
savefig(gcf, [save_path, 'latencies']);
%% Save stuff
% Export that data to a csv  
cell2csv([save_path, 'arousal_indices.csv'], arousal_indices);

% Save the workspace
save([save_path,'AT-data']);